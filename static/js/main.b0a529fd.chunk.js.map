{"version":3,"sources":["maskLoading.gif","App.js","serviceWorker.js","index.js"],"names":["module","exports","MapItem","React","memo","dataList","length","map","itm","idx","className","key","href","target","rel","style","color","background","MapList","mapData","useState","searchText","setSearchText","setDataList","debounceSearch","useRef","fn","delay","immediate","timer","clearTimeout","context","this","args","arguments","apply","setTimeout","debounce","mapArr","filter","indexOf","useEffect","current","Fragment","type","name","onChange","e","value","placeholder","App","isLoading","setIsLoading","setMapData","errText","setErrText","fetch","then","response","json","data","Object","values","console","log","catch","err","src","loadingGif","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b0a529fd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/maskLoading.08f38cd8.gif\";","import React, { useState, useEffect, useRef } from \"react\";\nimport loadingGif from \"./maskLoading.gif\";\nimport \"./App.scss\";\n\nfunction debounce(fn, delay, immediate) {\n  let timer = null;\n  return function() {\n    clearTimeout(timer);\n    let context = this;\n    let args = arguments;\n    if (!timer && immediate) {\n      fn.apply(context, args);\n    }\n    timer = setTimeout(function() {\n      if (!immediate) {\n        fn.apply(context, args);\n      } else {\n        timer = null;\n      }\n    }, delay);\n  };\n}\n\nconst MapItem = React.memo(({ dataList }) => {\n  if (dataList.length === 0) return <div>沒有資料</div>;\n  const hasMask = \"#21aa93\";\n  const emptyMask = \"#434343\";\n  return dataList.map((itm, idx) => {\n    return (\n      <a\n        className=\"mapListItem\"\n        key={itm[\"properties\"][\"id\"]}\n        href={`https://www.google.com.tw/maps/place/${itm[\"geometry\"][\"coordinates\"][1]},${itm[\"geometry\"][\"coordinates\"][0]}`}\n        target=\"_blank\"\n        rel=\"noreferrer noopener\"\n      >\n        <div className=\"listWrap\">\n          <div className=\"stock\">\n            {itm[\"properties\"][\"mask_adult\"] > 0 ||\n            itm[\"properties\"][\"mask_child\"] > 0 ? (\n              <div className=\"hasStock\">\n                <div>有庫存</div>\n              </div>\n            ) : (\n              <div className=\"emptyStock\">\n                <div>無庫存</div>\n              </div>\n            )}\n          </div>\n          <div className=\"items\">\n            <div className=\"name\">\n              {/* <span className=\"title\">藥局姓名</span> */}\n              <span>{itm[\"properties\"][\"name\"]}</span>\n            </div>\n            <div className=\"mask_number\">\n              <span style={{ color: \"#fff\", background: \"#113f67\" }}>成人</span>\n              <span\n                style={\n                  itm[\"properties\"][\"mask_adult\"] > 0\n                    ? { color: hasMask }\n                    : { color: emptyMask }\n                }\n              >\n                {itm[\"properties\"][\"mask_adult\"]}\n              </span>\n              <span style={{ color: \"#fff\", background: \"#dd6b4d\" }}>小孩</span>\n              <span\n                style={\n                  itm[\"properties\"][\"mask_child\"] > 0\n                    ? { color: hasMask }\n                    : { color: emptyMask }\n                }\n              >\n                {itm[\"properties\"][\"mask_child\"]}\n              </span>\n            </div>\n            <div className=\"phone\">\n              <span>{itm[\"properties\"][\"phone\"]}</span>\n            </div>\n            <div className=\"address\">\n              <span>{itm[\"properties\"][\"address\"]}</span>\n            </div>\n            <div className=\"updated\">\n              <span className=\"title\">更新時間</span>\n              <span>{itm[\"properties\"][\"updated\"]}</span>\n            </div>\n          </div>\n        </div>\n      </a>\n    );\n  });\n});\n\nconst MapList = ({ mapData }) => {\n  const [searchText, setSearchText] = useState(\"\");\n  const [dataList, setDataList] = useState(mapData);\n\n  const dataFilter = searchText => {\n    let mapArr = mapData.filter(\n      (itm, idx) => itm[\"properties\"][\"address\"].indexOf(searchText) !== -1\n    );\n    setDataList(mapArr);\n  };\n\n  const debounceSearch = useRef(debounce(dataFilter, 800));\n  useEffect(() => {\n    debounceSearch.current(searchText);\n  }, [searchText]);\n\n  return (\n    <React.Fragment>\n      <div className=\"header\">\n        <h1>口罩即時庫存列表</h1>\n        <div className=\"listWrap\">\n          <div className=\"inputWrap\">\n            <span>請輸入地址：</span>\n            <input\n              type=\"text\"\n              name=\"address\"\n              onChange={e => {\n                setSearchText(e.target.value);\n              }}\n              value={searchText}\n              placeholder=\"台北市、大安區、基隆路\"\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"mapList\">\n        <MapItem dataList={dataList}></MapItem>\n      </div>\n    </React.Fragment>\n  );\n};\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [mapData, setMapData] = useState([]);\n  const [errText, setErrText] = useState(\"\");\n  useEffect(() => {\n    fetch(\n      \"https://raw.githubusercontent.com/kiang/pharmacies/master/json/points.json\"\n    )\n      .then(response => {\n        return response.json();\n      })\n      .then(data => {\n        // let mapArr = Object.values(data)[1].map(itm => Object.values(itm)[1]);\n        let mapArr = Object.values(data)[1];\n        setMapData(mapArr);\n        // setTest(test);\n        setIsLoading(false);\n        console.log(\"create by Jeremy Chang 02272348\");\n      })\n      .catch(err => setErrText(\"好像壞了\"));\n  }, []);\n  if (isLoading)\n    return (\n      <div className=\"App\">\n        <div className=\"loading\">\n          <img src={loadingGif} alt=\"\" />\n        </div>\n      </div>\n    );\n  if (errText)\n    return (\n      <div className=\"App\">\n        <div>{errText}</div>\n      </div>\n    );\n  if (!mapData || mapData.length === 0)\n    return (\n      <div className=\"App\">\n        <div>沒有資料</div>\n      </div>\n    );\n  return (\n    <div className=\"App\">\n      <MapList mapData={mapData} isLoading={isLoading} />\n      <div className=\"information\">\n        資料提供：\n        <a href=\"https://g0v.hackmd.io/gGrOI4_aTsmpoMfLP1OU4A\">\n          口罩供需資訊平台\n        </a>\n        、\n        <a href=\"https://raw.githubusercontent.com/kiang/pharmacies/master/json/points.json\">\n          藥局+衛生所即時庫存 geojson by kiang\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}